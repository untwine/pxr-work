name: pypi-release

on:
  workflow_dispatch:
    inputs:
      is_dev:
        description: 'Build as development release.'
        required: true
        default: false
        type: boolean
      repository:
        description: 'Choose repository to upload to.'
        required: true
        default: testpypi
        type: choice
        options:
          - testpypi
          - pypi

run-name: ${{ inputs.repository }}-release${{ inputs.is_dev && ' (dev)' || '' }}

jobs:
  build_wheels:
    name: Build wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        os: [ linux-intel, linux-arm, windows, macOS-intel, macOS-arm ]
        include:
          - archs: auto64
            platform: auto
          - os: linux-intel
            runs-on: ubuntu-latest
          - os: linux-arm
            runs-on: ubuntu-24.04-arm
          - os: windows
            runs-on: windows-latest
          - os: macos-intel
            runs-on: macos-13
          - os: macos-arm
            runs-on: macos-latest
            archs: auto64,universal2

    steps:
      - uses: actions/checkout@v4

      - name: Use pyproject config based on release type
        shell: bash
        run: |
          if [[ "${{ github.event.inputs.is_dev }}" == "true" ]]; then
            cp pyproject-dev.toml pyproject.toml
          fi

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.1
        env:
          CIBW_PLATFORM: ${{ matrix.platform }}
          CIBW_ARCHS: ${{ matrix.archs }}
          CIBW_SKIP: "pp*"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair --exclude '*' -w {dest_dir} {wheel}"

      - uses: actions/upload-artifact@v4
        with:
          name: pxr-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use pyproject config based on release type
        shell: bash
        run: |
          if [[ "${{ github.event.inputs.is_dev }}" == "true" ]]; then
            cp pyproject-dev.toml pyproject.toml
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Build sdist
        run: |
          python -m pip install build
          python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: pxr-sdist
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: pxr-*
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          repository-url: >
            ${{ inputs.repository == 'pypi' &&
            'https://upload.pypi.org/legacy/' ||
            'https://test.pypi.org/legacy/' }}